FROM python:3.10-slim AS dagster

ENV DEBIAN_FRONTEND=noninteractive

# Install base dependencies 
RUN apt-get update && apt-get upgrade -yqq && apt-get install -yqq --no-install-recommends \
    curl \
    libaio1t64 \
    wget \
    alien \
    gnupg \
    ca-certificates \
    lsb-release \
    postgresql-client && \
    # Setup Docker repository
    # install -m 0755 -d /etc/apt/keyrings && \
    # curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    # chmod a+r /etc/apt/keyrings/docker.gpg && \
    # echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
    # $(. /etc/os-release && echo $VERSION_CODENAME) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install Poetry - added PATH before using poetry commands
ENV POETRY_HOME=/opt/poetry
ENV PATH="$POETRY_HOME/bin:$PATH"
RUN curl -sSL https://install.python-poetry.org | POETRY_HOME=$POETRY_HOME python3 - \
    && poetry config virtualenvs.create false

ENV DAGSTER_HOME=/opt/dagster/dagster_home/dagster-project

# Create necessary directories
RUN mkdir -p $DAGSTER_HOME

WORKDIR $DAGSTER_HOME

# Copy pyproject.toml and poetry.lock first
COPY pyproject.toml poetry.lock ./

# Ensure lock file matches pyproject before installing
RUN poetry lock --no-interaction --no-ansi || true \
    && poetry install --no-interaction --no-ansi --no-root


# Copy requirements and config files
COPY dagster.yaml $DAGSTER_HOME

EXPOSE 3000

CMD ["sh", "-c", "dagster-webserver -h 0.0.0.0 -p 3000 & dagster-daemon run"]
